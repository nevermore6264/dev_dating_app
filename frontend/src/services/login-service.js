import { jwtDecode } from "jwt-decode"; // Import th∆∞ vi·ªán jwt-decode ƒë·ªÉ gi·∫£i m√£ JWT token
import { instance, Login } from "./api-instance-provider"; // Import `instance` ƒë·ªÉ g·ªçi API v√† `Login` cho URL

// Ph∆∞∆°ng th·ª©c x·ª≠ l√Ω ƒëƒÉng nh·∫≠p
export const loginUser = async (email, password) => {
  try {
    // G·ª≠i y√™u c·∫ßu ƒëƒÉng nh·∫≠p v·ªõi email v√† password
    const response = await instance.post(Login.ORIGIN, {
      email,
      password,
    });

    // N·∫øu tr·∫°ng th√°i t·ª´ server tr·∫£ v·ªÅ l√† 200 (ƒëƒÉng nh·∫≠p th√†nh c√¥ng)
    if (response.data.status === 200) {
      const resultMessage = response.data.message;
      const token = response?.data?.data?.token; // Token s·∫Ω ch·ª©a trong `data`

      console.log("üöÄ ~ loginUser ~ response.data.data:", response.data.data);
      // X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p t·ª´ server
      if (resultMessage.startsWith("First login")) {
        alert("First login detected, please change your password.");

        // L∆∞u token v√†o localStorage
        if (token) {
          localStorage.setItem("userToken", token);
          localStorage.setItem("email", email);

          // Gi·∫£i m√£ token ƒë·ªÉ l·∫•y userId
          const decodedToken = jwtDecode(token);
          const userId = decodedToken.userId;

          if (userId) {
            localStorage.setItem("userId", userId); // L∆∞u userId v√†o localStorage
          }
        }

        // ƒêi·ªÅu h∆∞·ªõng ng∆∞·ªùi d√πng t·ªõi trang thay ƒë·ªïi m·∫≠t kh·∫©u
        return "First login"; // Tr·∫£ v·ªÅ ƒë·ªÉ ph√≠a frontend ƒëi·ªÅu h∆∞·ªõng t·ªõi trang ƒë·ªïi m·∫≠t kh·∫©u
      } else if (resultMessage.startsWith("Second login")) {
        alert("Second login detected, please update your profile.");

        // L∆∞u token v√†o localStorage
        if (token) {
          localStorage.setItem("userToken", token);
          localStorage.setItem("email", email);

          // Gi·∫£i m√£ token ƒë·ªÉ l·∫•y userId
          const decodedToken = jwtDecode(token);
          const userId = decodedToken.userId;

          if (userId) {
            localStorage.setItem("userId", userId); // L∆∞u userId v√†o localStorage
          }
        }

        // ƒêi·ªÅu h∆∞·ªõng ng∆∞·ªùi d√πng t·ªõi trang c·∫≠p nh·∫≠t th√¥ng tin
        return "Second login"; // Tr·∫£ v·ªÅ ƒë·ªÉ ph√≠a frontend ƒëi·ªÅu h∆∞·ªõng t·ªõi trang c·∫≠p nh·∫≠t h·ªì s∆°
      } else if (resultMessage === "Login successful") {
        alert("Login successful!");

        // L∆∞u token v√†o localStorage
        if (token) {
          localStorage.setItem("userToken", token);
          localStorage.setItem("email", email);

          // Gi·∫£i m√£ token ƒë·ªÉ l·∫•y userId
          const decodedToken = jwtDecode(token);
          const userId = decodedToken.userId;

          if (userId) {
            localStorage.setItem("userId", userId); // L∆∞u userId v√†o localStorage
          }
        }

        // ƒêi·ªÅu h∆∞·ªõng ng∆∞·ªùi d√πng t·ªõi trang homePage
        return "Login successful"; // Tr·∫£ v·ªÅ ƒë·ªÉ ph√≠a frontend ƒëi·ªÅu h∆∞·ªõng t·ªõi trang homePage
      } else {
        alert("Unknown response from server.");
        return "Unknown"; // Tr·∫£ v·ªÅ n·∫øu th√¥ng b√°o kh√¥ng r√µ r√†ng
      }
    } else {
      alert(response.data.message || "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i");
      return "Failed"; // Tr·∫£ v·ªÅ n·∫øu ƒëƒÉng nh·∫≠p th·∫•t b·∫°i
    }
  } catch (error) {
    // X·ª≠ l√Ω l·ªói ph√°t sinh trong qu√° tr√¨nh request
    alert(
      "Login failed! Please check your email and password." 
    );
    return "Error"; // Tr·∫£ v·ªÅ th√¥ng tin l·ªói
  }
};
